name: build-sunchirp-os
on:
  workflow_dispatch:
env:
#   IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  UBUNTU_VERSION: 22.04

jobs:
  push-ghcr:
    name: SunChirp
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Maximize GitHub Runner Build Space
        uses: ublue-os/remove-unwanted-software@v6

      - name: Checkout "Push to Registry" Action
        uses: actions/checkout@v4

#       - name: Matrix Variables
#         shell: bash
#         run: |
#           export FEDORA_IMAGE_NAME=silverblue
#           if [[ "${{ env.FEDORA_VERSION }}" -ge "40" ]]; then
#               echo "SOURCE_ORG=fedora" >> $GITHUB_ENV
#               echo "SOURCE_IMAGE=fedora-${FEDORA_IMAGE_NAME}" >> $GITHUB_ENV
#           else
#               echo "SOURCE_IMAGE=${FEDORA_IMAGE_NAME}" >> $GITHUB_ENV
#               echo "SOURCE_ORG=fedora-ostree-desktops" >> $GITHUB_ENV
#           fi
#           echo "IMAGE_NAME=blueox-os" >> $GITHUB_ENV

#       - name: Generate tags
#         id: generate-tags
#         shell: bash
#         run: |
#           # Generate a timestamp for creating an image version history
#           TIMESTAMP="$(date +%Y%m%d)"
#           MAJOR_VERSION="${{ env.FEDORA_VERSION }}"
#           COMMIT_TAGS=()
#           BUILD_TAGS=()
#           # Have tags for tracking builds during pull request
#           SHA_SHORT="${GITHUB_SHA::7}"

#           # Using clever bash string templating, https://stackoverflow.com/q/40771781
#           # don't make malformed tags if $MAJOR_VERSION is empty (base-image didn't include proper labels) --
#           COMMIT_TAGS+=("pr-${{ github.event.number }}${MAJOR_VERSION:+-$MAJOR_VERSION}")
#           COMMIT_TAGS+=("${SHA_SHORT}${MAJOR_VERSION:+-$MAJOR_VERSION}")

#           BUILD_TAGS=("${MAJOR_VERSION}" "${MAJOR_VERSION:+$MAJOR_VERSION-}${TIMESTAMP}")
#           # --

#           BUILD_TAGS+=("${TIMESTAMP}")
#           BUILD_TAGS+=("latest")

#           alias_tags=("${BUILD_TAGS[@]}")

#           echo "Generated the following build tags: "
#           for TAG in "${BUILD_TAGS[@]}"; do
#               echo "${TAG}"
#           done
#           echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

#       - name: Get current version
#         id: labels
#         run: |
#           ver=$(skopeo inspect docker://quay.io/${{ env.SOURCE_ORG }}/${{ env.SOURCE_IMAGE }}:${{ matrix.major_version }} | jq -r '.Labels["org.opencontainers.image.version"]')
#           echo "VERSION=$ver" >> $GITHUB_OUTPUT

#       # Generate image metadata
#       - name: Image Metadata
#         uses: docker/metadata-action@v5
#         id: meta
#         with:
#           images: |
#             ${{ env.IMAGE_NAME }}
#           labels: |
#             org.opencontainers.image.title=${{ env.IMAGE_NAME }}
#             org.opencontainers.image.version=${{ steps.labels.outputs.VERSION }}
#             org.opencontainers.image.description=A BlueOX OS
#             io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
#             io.artifacthub.package.logo-url=https://avatars.githubusercontent.com/u/120078124?s=200&v=4

#       # Build image using Buildah action
#       - name: Build Image
#         id: build_image
#         uses: redhat-actions/buildah-build@v2
#         with:
#           containerfiles: |
#             ./Containerfile
#           image: ${{ env.IMAGE_NAME }}
#           tags: |
#             ${{ steps.generate-tags.outputs.alias_tags }}
#           build-args: |
#             IMAGE_NAME=${{ github.event.repository.name }}
#             SOURCE_ORG=${{ env.SOURCE_ORG }}
#             SOURCE_IMAGE=${{ env.SOURCE_IMAGE }}
#             FEDORA_MAJOR_VERSION=${{ env.FEDORA_VERSION }}
#           labels: ${{ steps.meta.outputs.labels }}
#           oci: false

#       # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
#       # https://github.com/macbre/push-to-ghcr/issues/12
#       - name: Lowercase Registry
#         id: registry_case
#         uses: ASzc/change-string-case-action@v6
#         with:
#           string: ${{ env.IMAGE_REGISTRY }}

#       - name: Push To GHCR
#         uses: redhat-actions/push-to-registry@v2
#         id: push
#         if: github.event_name != 'pull_request'
#         env:
#           REGISTRY_USER: ${{ github.actor }}
#           REGISTRY_PASSWORD: ${{ github.token }}
#         with:
#           image: ${{ steps.build_image.outputs.image }}
#           tags: ${{ steps.build_image.outputs.tags }}
#           registry: ${{ steps.registry_case.outputs.lowercase }}
#           username: ${{ env.REGISTRY_USER }}
#           password: ${{ env.REGISTRY_PASSWORD }}
#           extra-args: |
#             --disable-content-trust

#       - name: Login to GitHub Container Registry
#         uses: docker/login-action@v3
#         if: github.event_name != 'pull_request'
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       # Sign container
#       - uses: sigstore/cosign-installer@v3.2.0
#         if: github.event_name != 'pull_request'

#       - name: Sign container image
#         if: github.event_name != 'pull_request'
#         run: |
#           cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${TAGS}
#         env:
#           TAGS: ${{ steps.push.outputs.digest }}
#           COSIGN_EXPERIMENTAL: false
#           COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

#       - name: Echo outputs
#         if: github.event_name != 'pull_request'
#         run: |
#           echo "${{ toJSON(steps.push.outputs) }}"

#   check:
#     name: Check all builds successful
#     runs-on: ubuntu-latest
#     needs: [push-ghcr]
#     steps:
#       - name: Exit
#         shell: bash
#         run: exit 0
